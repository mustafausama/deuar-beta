{"version":3,"sources":["Components/Header.js","Components/Word.js","Components/WordsList.js","Components/Main.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","state","isNavOpen","toggleNav","bind","this","setState","Navbar","color","dark","expand","NavbarBrand","href","NavbarToggler","onClick","Collapse","isOpen","navbar","Nav","className","NavItem","to","Component","Word","word","value","ListGroupItem","style","backgroundColor","bgColor","txColor","article","removeWord","id","type","class","aria-label","aria-hidden","energy","Badge","verticalAlign","pill","WordsList","newWord","handleNewWordAdd","handleNewWordChange","e","preventDefault","newWordHandler","target","words","map","removeWordHandler","Form","onSubmit","InputGroup","InputGroupAddon","addonType","InputGroupText","borderBottomLeftRadius","border","Input","placeholder","onChange","Button","borderBottomRightRadius","outline","ListGroup","borderTopLeftRadius","borderTopRightRadius","renderList","cookies","Cookies","set","Main","console","log","alleWorte","der","filter","das","die","reactLocalStorage","setObject","handleAddNewWord","renderHome","getObject","Object","keys","length","constructor","get","path","component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.3dc9230e.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\n\r\nimport {\r\n    Collapse,\r\n    Navbar,\r\n    NavbarToggler,\r\n    NavbarBrand,\r\n    Nav,\r\n    NavItem,\r\n} from 'reactstrap';\r\n\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nexport default class Header extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            isNavOpen: false\r\n        }\r\n        this.toggleNav = this.toggleNav.bind(this);\r\n    }\r\n    toggleNav() {\r\n        this.setState({isNavOpen: !this.state.isNavOpen});\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Navbar color=\"dark\" dark expand=\"md\">\r\n                    <NavbarBrand href=\"/\">DeuAr</NavbarBrand>\r\n                    <NavbarToggler onClick={this.toggleNav} />\r\n                        <Collapse isOpen={this.state.isNavOpen} navbar>\r\n                            <Nav className=\"mr-auto\" navbar>\r\n                                <NavItem>\r\n                                    <NavLink className=\"nav-link\" to=\"/home\">Home</NavLink>\r\n                                </NavItem>\r\n                                <NavItem>\r\n                                    <NavLink className=\"nav-link\" to=\"/flashcards\">Flash Cards</NavLink>\r\n                                </NavItem>\r\n                                <NavItem>\r\n                                    <NavLink className=\"nav-link\" to=\"/about\">About</NavLink>\r\n                                </NavItem>\r\n                                <NavItem>\r\n                                    <NavLink className=\"nav-link\" to=\"/contact\">Contact</NavLink>\r\n                                </NavItem>\r\n                                \r\n                            </Nav>\r\n                        </Collapse>\r\n                </Navbar>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport PropTypes from 'prop-types';\r\nimport { ListGroupItem, Badge } from 'reactstrap';\r\n\r\nclass Word extends Component {\r\n    render() {\r\n        if(this.props.word.value)\r\n        return (\r\n            <ListGroupItem style={{backgroundColor: this.props.bgColor, color: this.props.txColor}} className=\"justify-content-between\">\r\n                {this.props.article + ' ' + this.props.word.value}\r\n                \r\n                {this.props.removeWord ? <button onClick={this.props.removeWord.bind(this, this.props.word.id, this.props.article)} type=\"button\" class=\" float-right close ml-2\" aria-label=\"Close\">\r\n                    <span aria-hidden=\"true\">&times;</span>\r\n                </button> : null}\r\n                {(this.props.word.energy) ? <Badge style={{backgroundColor: this.props.txColor, color: this.props.bgColor, verticalAlign:'middle'}} className=\"float-right mt-1\" pill>{this.props.word.energy}</Badge> : null}\r\n            </ListGroupItem>\r\n        )\r\n        else return null;\r\n    }\r\n}\r\n\r\nWord.propTypes = {\r\n    word: PropTypes.object,\r\n    article: PropTypes.string,\r\n    bgColor: PropTypes.string,\r\n    txColor: PropTypes.string\r\n}\r\n\r\nexport default Word;\r\n","import React, { Component } from 'react'\r\nimport PropTypes from 'prop-types';\r\nimport { Form,\r\n    InputGroup,\r\n    InputGroupAddon,\r\n    InputGroupText,\r\n    Button,\r\n    Input,\r\n    ListGroup }\r\n    from 'reactstrap';\r\n\r\nimport Word from './Word';\r\n\r\nclass WordsList extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            newWord: '',\r\n        }\r\n        this.handleNewWordAdd = this.handleNewWordAdd.bind(this);\r\n        this.handleNewWordChange = this.handleNewWordChange.bind(this);\r\n    }\r\n\r\n    handleNewWordAdd(e) {\r\n        e.preventDefault();\r\n        if(this.state.newWord) {\r\n            this.props.newWordHandler(this.state.newWord, this.props.article);\r\n            this.setState({newWord: ''})\r\n        }\r\n    }\r\n\r\n    handleNewWordChange(e) {\r\n        this.setState({\r\n            newWord: e.target.value\r\n        })\r\n    }\r\n\r\n    renderList(words, article) {\r\n        return words.map((word) =>\r\n            <Word removeWord={this.props.removeWordHandler} bgColor={this.props.bgColor} txColor={this.props.txColor} word={word} article={article} />\r\n        )\r\n    } \r\n\r\n    render() {\r\n        const article = this.props.article;\r\n        return (\r\n            <div>\r\n                <Form onSubmit={this.handleNewWordAdd}>\r\n                    <InputGroup>\r\n                        <InputGroupAddon addonType=\"prepend\">\r\n                            <InputGroupText style={{borderBottomLeftRadius: '0', backgroundColor: this.props.bgColor, border: 'transparent', color: this.props.txColor}}>{article}</InputGroupText>\r\n                        </InputGroupAddon>\r\n                        <Input placeholder=\"word\" value={this.state.newWord} onChange={this.handleNewWordChange}/>\r\n                        <InputGroupAddon addonType=\"append\">\r\n                            <Button type=\"submit\" style={{borderBottomRightRadius: '0'}} outline color=\"info\">Add</Button>\r\n                        </InputGroupAddon>\r\n                    </InputGroup>\r\n                </Form>\r\n                <ListGroup style={{borderTopLeftRadius: '0', borderTopRightRadius: '0'}}>\r\n                    {this.renderList(this.props.words, article)}\r\n                    <Word bgColor={this.props.bgColor} txColor={this.props.txColor} style={{backgroundColor: 'black'}} word={{value: this.state.newWord, energy: 0}} article={article} />\r\n                </ListGroup>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nWordsList.propTypes = {\r\n    words: PropTypes.arrayOf(PropTypes.object),\r\n    article: PropTypes.oneOf(['der', 'die', 'das']),\r\n    bgColor: PropTypes.string,\r\n    txColor: PropTypes.string\r\n}\r\n\r\nexport default WordsList;\r\n","import React, { Component } from 'react'\r\nimport { Switch, Route, Redirect } from 'react-router-dom';\r\nimport Header from './Header';\r\nimport WordsList from './WordsList';\r\n\r\nimport Cookies from 'universal-cookie';\r\nimport { reactLocalStorage } from 'reactjs-localstorage';\r\n\r\nconst cookies = new Cookies();\r\ncookies.set('token', 'hello');\r\n\r\nclass Main extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            alleWorte: {\r\n                der: [],\r\n                das: [],\r\n                die: []\r\n            }\r\n        }\r\n        this.handleAddNewWord = this.handleAddNewWord.bind(this);\r\n        this.renderHome = this.renderHome.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        console.log(reactLocalStorage.getObject('alleWorte'));\r\n        if(Object.keys(reactLocalStorage.getObject('alleWorte')).length === 0 && reactLocalStorage.getObject('alleWorte').constructor === Object) return;\r\n        this.setState({alleWorte: reactLocalStorage.getObject('alleWorte')});\r\n    }\r\n\r\n    handleAddNewWord(word, article) {\r\n        this.setState({\r\n            alleWorte: {\r\n                der: (article === 'der') ? [...this.state.alleWorte.der, {id: ((this.state.alleWorte.der.length > 0) ? this.state.alleWorte.der[this.state.alleWorte.der.length-1].id+1 : 0), value: word, energy:0}] : this.state.alleWorte.der,\r\n                das: (article === 'das') ? [...this.state.alleWorte.das, {id: ((this.state.alleWorte.das.length > 0) ? this.state.alleWorte.das[this.state.alleWorte.das.length-1].id+1 : 0), value: word, energy:0}] : this.state.alleWorte.das,\r\n                die: (article === 'die') ? [...this.state.alleWorte.die, {id: ((this.state.alleWorte.die.length > 0) ? this.state.alleWorte.die[this.state.alleWorte.die.length-1].id+1 : 0), value: word, energy:0}] : this.state.alleWorte.die                \r\n            }\r\n        }, () => reactLocalStorage.setObject('alleWorte', this.state.alleWorte));\r\n    }\r\n\r\n    removeWord = (id, article) => {\r\n        console.log(id + \" \" + article);\r\n        this.setState({\r\n            alleWorte: {\r\n                der: (article === 'der') ? this.state.alleWorte.der.filter(word => word.id !== id) : this.state.alleWorte.der,\r\n                das: (article === 'das') ? this.state.alleWorte.das.filter(word => word.id !== id) : this.state.alleWorte.das,\r\n                die: (article === 'die') ? this.state.alleWorte.die.filter(word => word.id !== id) : this.state.alleWorte.die\r\n            }\r\n        }, () => reactLocalStorage.setObject('alleWorte', this.state.alleWorte));\r\n    }\r\n    \r\n    renderHome() {\r\n        const token = cookies.get('token');\r\n        //if(token !== undefined)\r\n            return(\r\n                <div className=\"container-fluid\">\r\n                    <div className=\"row\">\r\n                        <div className=\"col-md-4 mt-3\">\r\n                            <WordsList words={this.state.alleWorte.der} article=\"der\" newWordHandler={this.handleAddNewWord} removeWordHandler={this.removeWord} bgColor=\"#8254ff\" txColor=\"#fff\"/>\r\n                        </div>\r\n                        <div className=\"col-md-4 mt-3\">\r\n                            <WordsList words={this.state.alleWorte.das} article=\"das\" newWordHandler={this.handleAddNewWord} removeWordHandler={this.removeWord} bgColor=\"#27961f\" txColor=\"#fff\"/>\r\n                        </div>\r\n                        <div className=\"col-md-4 mt-3\">\r\n                            <WordsList words={this.state.alleWorte.die} article=\"die\" newWordHandler={this.handleAddNewWord} removeWordHandler={this.removeWord} bgColor=\"#a83220\" txColor=\"#fff\"/>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            )\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n            <Header />\r\n                <Switch>\r\n                    <Route path=\"/\" component={this.renderHome}></Route>\r\n\t\t\t\t\t<Redirect to=\"/\" />\r\n                </Switch>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Main;\r\n","import React from 'react';\n\nimport Main from './Components/Main';\n\nimport './App.css';\n\nimport { BrowserRouter } from 'react-router-dom';\n\nfunction App() {\n\treturn (\n\t\t<BrowserRouter>\n\t\t\t<Main />\n\t\t</BrowserRouter>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}